<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= exam.name %> - Test</title>
    <style>
        video , canvas  {
            display: none;

        }
    </style>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <h1><%= exam.name %> - Test</h1>
    <button id="startExamBtn">Start Exam</button>
    <div id="examContent" style="display: none;">
    <form action="/dashboard/submit-test" method="POST">
        <input type="hidden" name="examId" value="<%= exam._id %>">

        <% exam.mcqQuestions.forEach((question, index) => { %>
            <div>
                <p><strong>Q<%= index + 1 %>:</strong> <%= question.question %></p>
                <% question.options.forEach((option, idx) => { %>
                    <label>
                        <input type="radio" name="mcq-<%= question._id %>" value="<%= option %>">
                        <%= option %>
                    </label>
                <% }); %>
            </div>
        <% }); %>

        <% exam.codingQuestions.forEach((question, index) => { %>
            <div>
                <p><strong>Q<%= index + 1 + exam.mcqQuestions.length %>:</strong> <%= question.question %></p>
                <textarea name="coding-<%= question._id %>" rows="5" cols="50" placeholder="Write your code here..."></textarea>
            </div>
        <% }); %>

        <button type="submit">Submit Test</button>
    </form>
</div>


    <h1>Online Examination Anti-Cheat System</h1>
    <p><strong>Tab Changes Detected:</strong> <span id="tabChangeCount">0</span></p>
    <p><strong>Mouse Left Workspace:</strong> <span id="mouseOutCount">0</span></p>
    <p><strong>Fullscreen Exit Attempts:</strong> <span id="fullscreenExitCount">0</span></p>
    <p><strong>Copy Attempts:</strong> <span id="copyAttemptCount">0</span></p>
    <p><strong>Paste Attempts:</strong> <span id="pasteAttemptCount">0</span></p>
    <p><strong>Focus Changes Detected:</strong> <span id="focusChangeCount">0</span></p>
    <p><strong>Last Event:</strong> <span id="lastEvent">N/A</span></p>
    <p><strong>Screen Configuration:</strong> <span id="screenConfig">Checking...</span></p>

    <canvas id="canvas" width="320" height="240"></canvas>

    <script>
        let tabChangeCount = 0;
        let mouseOutCount = 0;
        let fullscreenExitCount = 0;
        let copyAttemptCount = 0;
        let pasteAttemptCount = 0;
        let focusChangeCount = 0;
        let isFullscreenActive = false; 

        function handleTabChange() {
            if (document.hidden) {
                tabChangeCount++;
                updateStatus("Tab change detected");
            }
            updateUI();
        }

        function handleMouseOut(event) {
            if (
                event.clientX < 0 || 
                event.clientX > window.innerWidth - 1 || 
                event.clientY < 0 || 
                event.clientY > window.innerHeight - 1
            ) {
                mouseOutCount++;
                updateStatus("Mouse left workspace");
                updateUI();
            }
        }

        async function detectScreenCount() {
            if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
                document.getElementById('screenConfig').textContent = "Screen detection not supported";
                return;
            }

            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoInputs = devices.filter(device => device.kind === "videoinput");
                
                if (videoInputs.length > 1) {
                    document.getElementById('screenConfig').textContent = `Multiple screens detected (Total: ${videoInputs.length})`;
                } else {
                    document.getElementById('screenConfig').textContent = "Single screen detected";
                }
            } catch (error) {
                console.error("Error detecting screens:", error);
                document.getElementById('screenConfig').textContent = "Screen detection failed";
            }
        }

        function enterFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
        }

        document.addEventListener('copy', (e) => {
            e.preventDefault();
            copyAttemptCount++;
            updateStatus("Copy attempt blocked");
            updateUI();
        });

        document.addEventListener('paste', (e) => {
            e.preventDefault();
            pasteAttemptCount++;
            updateStatus("Paste attempt blocked");
            updateUI();
        });

        function handleFocusChange(event) {
            if (event.type === 'blur') {
                focusChangeCount++;
                updateStatus("Focus lost (user switched away)");
            } else if (event.type === 'focus') {
                updateStatus("Focus regained (user switched back)");
            }
            updateUI();
        }

        function updateStatus(eventMessage) {
            const currentTime = new Date().toLocaleTimeString();
            document.getElementById('lastEvent').textContent = `${eventMessage} at ${currentTime}`;
        }

        function updateUI() {
            document.getElementById('tabChangeCount').textContent = tabChangeCount;
            document.getElementById('mouseOutCount').textContent = mouseOutCount;
            document.getElementById('fullscreenExitCount').textContent = fullscreenExitCount;
            document.getElementById('copyAttemptCount').textContent = copyAttemptCount;
            document.getElementById('pasteAttemptCount').textContent = pasteAttemptCount;
            document.getElementById('focusChangeCount').textContent = focusChangeCount;
        }


        function startWebcamCapture() {
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');

    navigator.mediaDevices.getUserMedia({ video: true })
        .then((stream) => {
            const video = document.createElement('video');
            video.srcObject = stream;
            video.play();

            setInterval(() => {
                context.drawImage(video, 0, 0, canvas.width, canvas.height);

                canvas.toBlob((blob) => {
                    if (!blob) return;

                    const formData = new FormData();
                    formData.append('image', blob, `capture-${Date.now()}.png`);

                    fetch('/save-image', { 
                        method: 'POST',
                        body: formData, // Sending as file, no need for headers
                    })
                    .then(response => response.json())
                    .then(data => console.log('Image saved:', data))
                    .catch(error => console.error('Error saving image:', error));

                }, 'image/png');

            }, 5000);
        })
        .catch((error) => {
            console.error("Error accessing webcam:", error);
            alert("Unable to access the webcam. Please allow access.");
        });
}

        document.addEventListener('visibilitychange', handleTabChange);
        window.addEventListener('blur', handleFocusChange);
        window.addEventListener('focus', handleFocusChange);

        document.addEventListener('fullscreenchange', () => {
            if (!document.fullscreenElement) {
                fullscreenExitCount++;
                updateStatus("Fullscreen exited");
                updateUI();
                enterFullscreen();
                updateStatus("Re-entered fullscreen after exit attempt");
            } else {
                if (!isFullscreenActive) {
                    document.addEventListener('mouseout', handleMouseOut);
                    isFullscreenActive = true;
                }
                updateStatus("Fullscreen entered");
            }
        });

        window.onload = () => {
            detectScreenCount();
            enterFullscreen();
            updateStatus("Entered fullscreen mode");
            startWebcamCapture();
        };

        document.addEventListener('click', () => {
            if (!document.fullscreenElement) {
                enterFullscreen();
                updateStatus("Fullscreen mode ensured after click");

            }
        });

    </script>

<script>
    document.getElementById("startExamBtn").addEventListener("click", function() {
        document.getElementById("examContent").style.display = "block";  // Show the questions
        this.style.display = "none";  // Hide the "Start Exam" button
    });
</script>
</body>






</html>
